* Configuration
** About this file
 Based on Sacha Chua's Emacs configuration


** required software
- sudo apt install gnuplot
- sudo apt install texlive-full
- sudo apt install clang
- sudo apt install global
- sudo apt install git
- sudo apt install ditaa
- sudo apt install graphviz

*** start as daemon
1. add `emacs --daemon` in .bashrc or .zshrc
2. bind `Ctrl Alt z` to command `emacsclient -c`
** General configuration
*** common functions
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun lzq-info (str)
    "log STR into *message* buffer"
    (message (concat "LAUNCH-STEP: " str)))
#+END_SRC

*** Save current session
#+BEGIN_SRC emacs-lisp :tangle yes
  (lzq-info "(desktop-save-mode 1)")
  (desktop-save-mode 1)
#+END_SRC


** Starting up
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (add-to-list 'package-archives '("melpa" .  "http://melpa.org/packages/") 'APPEND)
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (lzq-info "install use-package")
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
#+END_SRC


** Personal information
#+BEGIN_SRC emacs-lisp :tangle yes
  (lzq-info "setup personal info")
  (setq user-full-name "Zhenqiang Li"
        user-email-address "lizhenqiangsnake@gmail.com")
#+END_SRC


** Latex
*** header template for latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ryne-org-latex-header ()
    (interactive)
    (progn
      (insert "#+TITLE: \n"
              "#+AUTHOR: \n"
              "#+DATE: \\today \n"
              ;; avoid redbox around link
              "#+LATEX_HEADER: \\hypersetup{hidelinks=true}\n"
              ;; correct reference, just use \cite{key} for reference, see helm-bibtex for more info
              "#+LaTeX_HEADER: \\usepackage[backend=bibtex,sorting=none]{biblatex}\n"
              "#+LaTeX_HEADER: \\addbibresource{~/.emacs.d/references/main.bib}\n"
              "#+OPTIONS: H:2 num:t toc:nil ^:nil\n")))
#+END_SRC

*** tex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex :ensure auctex)
#+END_SRC


** Git
*** magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t)
#+END_SRC


** Fuzzy search anything
- helm-locate :: find files
*** helm
#+BEGIN_SRC emacs-lisp :exports none
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
            helm-yas-display-key-on-candidate t
            helm-split-window-default-side 'left
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      (helm-mode)))
#+END_SRC

**** helm-gtags
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-gtags
    :ensure t)
#+END_SRC

**** helm-bibtex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-bibtex
    :ensure t
    :pin melpa-stable
    :config
    (progn
      (setq bibtex-completion-bibliography
            '("~/.emacs.d/references/main.bib"))
      ;;; bibtex-completion assume pdf name is key.pdf, e.g. for key "Darwin1859", the pdf name is "Darwin1859.pdf"
      (setq bibtex-completion-library-path
            '("~/.emacs.d/references/pdfs"))
      (setq bibtex-completion-notes-path "~/.emacs.d/references/org-notes/")))
#+END_SRC


*** projects browser
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config
    (progn
      (setq projectile-keymap-prefix (kbd "C-c p"))
      (setq projectile-completion-system 'default)
      (setq projectile-enable-caching t)
      (setq projectile-require-project-root nil)
      (setq projectile-indexing-method 'alien)
      (add-to-list 'projectile-globally-ignored-files "node-modules"))
    :config
    (projectile-global-mode))
  (use-package helm-projectile
    :ensure t)
#+end_src


** org-mode configure
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        '((sequence "TODO" "BLOCKED" "DONE")))
  ;; active babel support languange
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (python . t)
     (ditaa . t)
     (sh . t)
     (java . t)
     (C . t)
     (scheme . t)
     (plantuml . t)))
  ;; set ditaa jar path
  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

  ;; Do not need confirm to execute source code
  (setq org-confirm-babel-evaluate nil)

  ;; Refresh inline images when execute python code
  (defun ryne-org-ctrl-c-ctrl-c ()
    (interactive)
    (progn
      (org-ctrl-c-ctrl-c)
      (org-redisplay-inline-images)))

  ;; http://tex.stackexchange.com/questions/197707/using-bibtex-from-org-mode-bbl-and-aux-files-are-incorrectly-generated
  ;; used for org-mode reference
  (setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
#+END_SRC
*** TODO use ditaa for graph
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC

*** org agenda
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files '("~/.dailylife"))
#+END_SRC

*** use plantuml for UML
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :ensure t
    :init (setq org-plantuml-jar-path
                (expand-file-name "~/.emacs.d/bin/plantuml.1.2017.14.jar")))
#+END_SRC
** Gnuplot
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package gnuplot
    :ensure t)
  (use-package gnuplot-mode
    :ensure t)
#+END_SRC

** UI config
*** org-mode color theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package leuven-theme
    :ensure t)
#+END_SRC
*** TODO PowerLine
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC

***
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
*** Keyword Highlights
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun add-watchwords ()
    (font-lock-add-keywords
     nil '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
            1 font-lock-warning-face t))))
#+END_SRC

*** Window margin setting
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Margin Manager
  (mapc #'make-variable-buffer-local '(mm-overlays))

  (defun mm-push-overlay (o)
    "Push one overlay"
    (push o mm-overlays))

  (defun mm-delete-overlays ()
    "Delete all overlays displaying line numbers for this buffer."
    (mapc #'delete-overlay mm-overlays)
    (setq mm-overlays nil))

  (defun mm-margin-line (linum lstr rstr)
    "Update window WIN's LINUM line's left margin to LSTR and right margin to RSTR."
    (setq currp (point))
    ;; DONT use goto-line, it will set-mark
    (forward-line (- linum (line-number-at-pos)))
    (let ((startp (point))
          (endp nil))
      (forward-line)
      (setq endp (1- (point)))
      (let ((ov (make-overlay startp endp)))
        (mm-push-overlay ov)
        (overlay-put ov 'before-string
                     (propertize " " 'display `((margin left-margin) ,lstr)))))
    (goto-char currp))

  (defun mm-margin-current-window ()
   "Update current window"
   (let ((curr-pos (point))
         (curr-line (line-number-at-pos))
         (default-width 2) ; default margin width
         (startp (window-start))
         (endp (window-end nil t)))
     (mm-delete-overlays)
     ;; determine margin width
     (setq width (max
                  default-width
                  ; current window margin is not used
                  ; (if (not (car (window-margins))) 0 (car (window-margins)))
                  (length (number-to-string curr-line))))
     (set-window-margins nil width nil)
     ;; set format string
     (setq fmt (concat "%"
                       (number-to-string (length (number-to-string curr-line)))
                       "d"))
     ;; numbering lines
     (mm-margin-line curr-line (format fmt curr-line) nil)
     ; numbering lines below
     (forward-line)
     (setq line 1)
     (while (and (not (eobp)) (<= (point) endp))
       (mm-margin-line (line-number-at-pos) (format fmt line) nil)
       (forward-line)
       (setq line (1+ line)))
     (goto-char curr-pos)
     ; numbering lines above
     (setq line 1)
     (forward-line -1)
     (while (> (point) startp)
       (mm-margin-line (line-number-at-pos)
                       (format fmt line)
                       nil)
       (forward-line -1)
       (setq line (1+ line))
       )
     (goto-char curr-pos)
     ))

  ;; (add-hook 'post-command-hook 'mm-margin-current-window t)

  ;; (set-window-margins nil 20 nil)
  ;; (mm-margin-line 47 "A " nil)
  ;; (mm-margin-current-window)
  ;; (set-mark-command (point))
  ;; (print post-command-hook)

#+END_SRC


** Auto-completion
Copy from [[https://github.com/sandhu/emacs.d/tree/master/config][Sandhu's github configuration]]
*** Completion Configure
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company :ensure t
    :init (setq company-idle-delay 0.2
                company-tooltip-limit 10
                company-minimum-prefix-length 2
                company-tooltip-flip-when-above t)
    :config (global-company-mode 1)
    :diminish " Î±")

  (use-package company-flx :ensure t
    :config (company-flx-mode +1))

  (use-package company-quickhelp :ensure t
  :config (company-quickhelp-mode 1))
#+END_SRC


** TODO Give CEDET a try
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC

** Function Header Navigate
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sr-speedbar
    :ensure t
    :defer t
    :init
    ;; Show tree on the left side
    (setq sr-speedbar-right-side nil)
    ;; Show all files
    (setq speedbar-show-unknown-files t)
    ;; Bigger size (default is 24)
    (setq sr-speedbar-width 30)
    ;; clean workspace
    (setq sr-speedbar-delete-windows t)
    )

#+END_SRC

** Languages specific
*** TODO c++
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC
*** python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python-mode
    :ensure t)
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-mode
    :ensure t)
#+END_SRC
*** java
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC

*** groovy
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package groovy-mode
    :ensure t)
#+END_SRC
*** scheme
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; turn on highlight matching brackets when cursor is on one
  (show-paren-mode 1)
  (setq show-paren-style 'expression)
  ;; setup paredit
  (use-package paredit
    :ensure t
    :init
    (dolist (hook '(emacs-lisp-mode-hook lisp-mode-hook geiser-mode-hook
                                         clojure-mode-hook))
      (add-hook hook 'paredit-mode))
    :diminish paredit-mode)
  (use-package geiser
    :ensure t
    :init
    (setq geiser-active-implementations '(mit))
    :config
    (add-hook 'scheme-mode-hook 'geiser-mode))

#+END_SRC
** Shortcut
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c C-i") 'ido-imenu)
  (global-set-key (kbd "C-c h") 'helm-mini)
  (global-set-key (kbd "C-h a") 'helm-apropos)
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x g d") 'helm-gtags-find-tag-from-here)
  (global-set-key (kbd "C-x g p") 'helm-gtags-pop-stack)
  (global-set-key (kbd "C-x g s") 'helm-gtags-show-stack)
  (global-set-key (kbd "C-x p f") 'projectile-find-file)
  (global-set-key (kbd "C-x r") 'helm-imenu)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x c o") 'helm-occur)
  (global-set-key (kbd "C-x c s") 'helm-swoop)
  (global-set-key (kbd "C-x c y") 'helm-yas-complete)
  (global-set-key (kbd "C-x c Y") 'helm-yas-create-snippet-on-region)
  (global-set-key (kbd "C-x c b") 'my/helm-do-grep-book-notes)
  (global-set-key (kbd "C-x c SPC") 'helm-all-mark-rings)
  (global-set-key (kbd "C-x C-m") 'smex)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)

#+END_SRC
