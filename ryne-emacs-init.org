* Configuration
** About this file
 Based on Sacha Chua's Emacs configuration


** Basic manual
*** required software
- sudo apt install gnuplot
- sudo apt install texlive-full
- sudo apt install clang
- sudo apt install global
- sudo apt install git
- sudo apt install ditaa
- sudo apt install graphviz

*** start as daemon
1. add `emacs --daemon` in .bashrc or .zshrc
2. bind `Ctrl Alt z` to command `emacsclient -c`

*** use-package basic
#+BEGIN_SRC emacs-lisp
  (use-package <package-name>
    :ensure [t/nil] ;; required package or not
    :init (progn ) ;; run before the package is loaded 
    :config (progn ) ;; run after the package is loaded
    )
#+END_SRC

** General configuration
*** common functions
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun lzq-info (str)
    "log STR into *message* buffer"
    (message (concat "LAUNCH-STEP: " str)))
#+END_SRC
*** Personal information
#+BEGIN_SRC emacs-lisp :tangle yes
  (lzq-info "setup personal info")
  (setq user-full-name "Zhenqiang Li"
	user-email-address "lizhenqiangsnake@gmail.com"
	user-gtd-directory "~/.dailylife")
#+END_SRC

*** bootstrap packages
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "melpa-stable" package-archives)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
  (unless (package-installed-p 'use-package)
    (lzq-info "install use-package")
    ;; error: Package `use-package-' is unavailable
    ;; https://emacs.stackexchange.com/questions/39250/error-package-use-package-is-unavailable
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (setq use-package-minimum-reported-time .001
        use-package-verbose t
        use-package-always-defer t
        use-package-compute-statistics t)
  (require 'bind-key)
#+END_SRC

*** Save current session
#+BEGIN_SRC emacs-lisp :tangle yes
  (lzq-info "(desktop-save-mode 1)")
  (desktop-save-mode 1)
#+END_SRC

*** disable toolbar in window
#+BEGIN_SRC emacs-lisp :tangle yes
  (tool-bar-mode -1)
#+END_SRC
*** disable menubar
#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -1)
#+END_SRC
*** disable scrollbar
#+BEGIN_SRC emacs-lisp :tangle yes
  (scroll-bar-mode -1)
#+END_SRC
*** show column number
#+BEGIN_SRC emacs-lisp :tangle yes
  (column-number-mode t)
#+END_SRC
*** show time in mode bar
#+BEGIN_SRC emacs-lisp :tangle yes
  (display-time-mode 1)
#+END_SRC



** load packages
*** magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t)
#+END_SRC

*** ivy
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ivy
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (bind-key "C-c C-r" 'ivy-resume))
#+END_SRC

*** hydra
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hydra
    :ensure t)
#+END_SRC
*** projectile for ivy
http://bnbeckwith.com/bnb-emacs/
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :bind
    ("C-x w" . hydra-projectile-other-window/body)
    ("C-c C-p" . hydra-projectile/body)
    :config
    (use-package counsel-projectile
      :ensure t)
    (when (eq system-type 'windows-nt)
      (setq projectile-indexing-method 'native))
    (setq projectile-enable-caching t
          projectile-require-project-root t
          projectile-mode-line '(:eval (format " 项目[%s]" (projectile-project-name)))
          projectile-completion-system 'ivy)
    (projectile-mode)
    (defhydra hydra-projectile-other-window (:color teal)
      "projectile-other-window"
      ("f"  projectile-find-file-other-window        "file")
      ("g"  projectile-find-file-dwim-other-window   "file dwim")
      ("d"  projectile-find-dir-other-window         "dir")
      ("b"  projectile-switch-to-buffer-other-window "buffer")
      ("q"  nil                                      "cancel" :color blue))
    (defhydra hydra-projectile (:color teal :hint nil)
      "
   PROJECTILE: %(projectile-project-root)

   Find File            Search/Tags          Buffers                Cache
    ------------------------------------------------------------------------------------------
    _C-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
     _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
     _fd_: file curr dir   _o_: multi-occur     _C-k_: Kill all buffers  _X_: cleanup non-existing
      _r_: recent file                                               ^^^^_z_: cache current
      _d_: dir

    "
      ("a"   counsel-projectile-ag)
      ("b"   projectile-switch-to-buffer)
      ("c"   projectile-invalidate-cache)
      ("d"   projectile-find-dir)
      ("C-f" projectile-find-file)
      ("ff"  projectile-find-file-dwim)
      ("fd"  projectile-find-file-in-directory)
      ("g"   ggtags-update-tags)
      ("C-g" ggtags-update-tags)
      ("i"   projectile-ibuffer)
      ("K"   projectile-kill-buffers)
      ("C-k" projectile-kill-buffers)
      ("m"   projectile-multi-occur)
      ("o"   projectile-multi-occur)
      ("C-p" projectile-switch-project "switch project")
      ("p"   projectile-switch-project)
      ("s"   projectile-switch-project)
      ("r"   projectile-recentf)
      ("x"   projectile-remove-known-project)
      ("X"   projectile-cleanup-known-projects)
      ("z"   projectile-cache-current-file)
      ("`"   hydra-projectile-other-window/body "other window")
      ("q"   nil "cancel" :color blue)))

#+END_SRC

*** use plantuml for UML
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :ensure t
    :init (setq org-plantuml-jar-path
                (expand-file-name "~/.emacs.d/bin/plantuml.1.2017.14.jar")))
#+END_SRC
*** install company for completion
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package company :ensure t
      :init (setq company-idle-delay 0.2
                  company-tooltip-limit 10
                  company-minimum-prefix-length 2
                  company-tooltip-flip-when-above t)
      :config (global-company-mode 1)
      :diminish " α")

    (use-package company-flx :ensure t
      :config (company-flx-mode +1))

    (use-package company-quickhelp :ensure t
    :config (company-quickhelp-mode 1))
#+END_SRC

*** powerline
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powerline
    :ensure t
    :init
    (progn
      (powerline-default-theme)))

#+END_SRC
*** server
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package server
    :config
    (progn
      (defun server-enable ()
	(unless (server-running-p)
	  (server-start)))
      (add-hook 'after-init-hook 'server-enable t)))
#+END_SRC
** TODO Customize color theme
*** Keyword Highlights
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun add-watchwords ()
    (font-lock-add-keywords
     nil '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
            1 font-lock-warning-face t))))
#+END_SRC
   
** Navigation
*** Pop to mark (go back to last position)
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-key "C-x p p" 'pop-to-mark-command)
  (setq set-mark-command-repeat-pop t)
#+END_SRC
    
** org-mode configure
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        '((sequence "TODO" "BLOCKED" "DONE")))
  ;; active babel support languange
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (python . t)
     (ditaa . t)
     (shell . t)
     (java . t)
     (C . t)
     (scheme . t)
     (plantuml . t)))
  ;; set ditaa jar path
  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

  ;; Do not need confirm to execute source code
  (setq org-confirm-babel-evaluate nil)

  ;; Refresh inline images when execute python code
  (defun ryne-org-ctrl-c-ctrl-c ()
    (interactive)
    (progn
      (org-ctrl-c-ctrl-c)
      (org-redisplay-inline-images)))

  ;; http://tex.stackexchange.com/questions/197707/using-bibtex-from-org-mode-bbl-and-aux-files-are-incorrectly-generated
  ;; used for org-mode reference
  (setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
#+END_SRC
*** org theme
**** cool theme, need to learn how to set correctly
https://lepisma.github.io/2017/10/28/ricing-org-mode/
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package leuven-theme
      :ensure t
      :init
      (load-theme 'leuven t)
      ;; Ever-so-slightly darker background
      (set-face-background 'default "#F7F7F7"))
#+END_SRC
  
*** org agenda
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files (list user-gtd-directory))
#+END_SRC

*** Gnuplot
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package gnuplot
    :ensure t)
  (use-package gnuplot-mode
    :ensure t)
#+END_SRC

*** org-bulletin
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-bullets
    :ensure t
    :commands (org-bullets-mode)
    :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org capture settings
https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-default-notes-file (concat user-gtd-directory "/inbox.org"))
#+END_SRC
** Languages specific
*** python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python-mode
    :ensure t)
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-mode
    :ensure t)
#+END_SRC
*** scheme
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; turn on highlight matching brackets when cursor is on one
  (show-paren-mode 1)
  (setq show-paren-style 'expression)
  ;; setup paredit
  (use-package paredit
    :ensure t
    :init
    (dolist (hook '(emacs-lisp-mode-hook lisp-mode-hook geiser-mode-hook
                                         clojure-mode-hook))
      (add-hook hook 'paredit-mode))
    :diminish paredit-mode)
  (use-package geiser
    :ensure t
    :init
    (setq geiser-active-implementations '(mit))
    :config
    (add-hook 'scheme-mode-hook 'geiser-mode))

#+END_SRC

*** Latex (move this to org mode settings?)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex :ensure auctex)
#+END_SRC
**** header template for latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ryne-org-latex-header ()
    (interactive)
    (progn
      (insert "#+TITLE: \n"
              "#+AUTHOR: \n"
              "#+DATE: \\today \n"
              ;; avoid redbox around link
              "#+LATEX_HEADER: \\hypersetup{hidelinks=true}\n"
              ;; correct reference, just use \cite{key} for reference, see helm-bibtex for more info
              "#+LaTeX_HEADER: \\usepackage[backend=bibtex,sorting=none]{biblatex}\n"
              "#+LaTeX_HEADER: \\addbibresource{~/.emacs.d/references/main.bib}\n"
              "#+OPTIONS: H:2 num:t toc:nil ^:nil\n")))
#+END_SRC

** Startup settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-splash-screen t)
  (org-agenda-list)
  (delete-other-windows)
  (setq initial-buffer-choice (lambda ()
    (org-agenda nil "t")
    (get-buffer "*Org Agenda*")))
#+END_SRC
