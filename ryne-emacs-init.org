* Configuration
** About this file
 Based on Sacha Chua's Emacs configuration


** required software
- sudo apt install gnuplot
- sudo apt install texlive-full
- sudo apt install clang
- sudo apt install global
- sudo apt install git
- sudo apt install ditaa
- sudo apt install graphviz

*** start as daemon
1. add `emacs --daemon` in .bashrc or .zshrc
2. bind `Ctrl Alt z` to command `emacsclient -c`
** General configuration

*** common functions
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun lzq-info (str)
    "log STR into *message* buffer"
    (message (concat "LAUNCH-STEP: " str)))
#+END_SRC
*** Personal information
#+BEGIN_SRC emacs-lisp :tangle yes
  (lzq-info "setup personal info")
  (setq user-full-name "Zhenqiang Li"
        user-email-address "lizhenqiangsnake@gmail.com")
#+END_SRC

*** bootstrap packages
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "melpa-stable" package-archives)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
  (unless (package-installed-p 'use-package)
    (lzq-info "install use-package")
    ;; error: Package `use-package-' is unavailable
    ;; https://emacs.stackexchange.com/questions/39250/error-package-use-package-is-unavailable
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (setq use-package-minimum-reported-time .001
        use-package-verbose t
        use-package-always-defer t
        use-package-compute-statistics t)
  (require 'bind-key)
#+END_SRC

*** Save current session
#+BEGIN_SRC emacs-lisp :tangle yes
  (lzq-info "(desktop-save-mode 1)")
  (desktop-save-mode 1)
#+END_SRC

*** disable toolbar in window
#+BEGIN_SRC emacs-lisp :tangle yes
  (tool-bar-mode -1)
#+END_SRC

*** show time in mode bar
#+BEGIN_SRC emacs-lisp :tangle yes
  (display-time-mode 1)
#+END_SRC



** load packages
*** TODO Winnner mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package winner
    :disabled
    :defer t)
#+END_SRC
*** magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t)
#+END_SRC

*** ivy related
#+BEGIN_SRC emacs-lisp :tangle yes
;; ivy
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  (bind-key "C-c C-r" 'ivy-resume))

;; projectile
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-mode-line
        '(:eval (format " [%s]" (projectile-project-name))))
  (setq projectile-remember-window-configs t)
  (setq projectile-completion-system 'ivy))

#+END_SRC

*** ivy-imenu-anywhere
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy-imenu-anywhere)
#+END_SRC
*** use plantuml for UML
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :ensure t
    :init (setq org-plantuml-jar-path
                (expand-file-name "~/.emacs.d/bin/plantuml.1.2017.14.jar")))
#+END_SRC
*** install company for completion
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company :ensure t
    :init (setq company-idle-delay 0.2
                company-tooltip-limit 10
                company-minimum-prefix-length 2
                company-tooltip-flip-when-above t)
    :config (global-company-mode 1)
    :diminish " Î±")

  (use-package company-flx :ensure t
    :config (company-flx-mode +1))

  (use-package company-quickhelp :ensure t
  :config (company-quickhelp-mode 1))
#+END_SRC

** TODO Customize color theme
*** Keyword Highlights
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun add-watchwords ()
    (font-lock-add-keywords
     nil '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
            1 font-lock-warning-face t))))
#+END_SRC
   
** Navigation
*** Pop to mark (go back to last position)
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-key "C-x p p" 'pop-to-mark-command)
  (setq set-mark-command-repeat-pop t)
#+END_SRC
    
** org-mode configure
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        '((sequence "TODO" "BLOCKED" "DONE")))
  ;; active babel support languange
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (python . t)
     (ditaa . t)
     (sh . t)
     (java . t)
     (C . t)
     (scheme . t)
     (plantuml . t)))
  ;; set ditaa jar path
  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

  ;; Do not need confirm to execute source code
  (setq org-confirm-babel-evaluate nil)

  ;; Refresh inline images when execute python code
  (defun ryne-org-ctrl-c-ctrl-c ()
    (interactive)
    (progn
      (org-ctrl-c-ctrl-c)
      (org-redisplay-inline-images)))

  ;; http://tex.stackexchange.com/questions/197707/using-bibtex-from-org-mode-bbl-and-aux-files-are-incorrectly-generated
  ;; used for org-mode reference
  (setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
#+END_SRC
*** org theme
**** cool theme, need to learn how to set correctly
https://lepisma.github.io/2017/10/28/ricing-org-mode/

#+BEGIN_SRC emacs-lisp :tangle yes
  
*** org agenda

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files '("~/.dailylife"))
#+END_SRC

*** Gnuplot
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package gnuplot
    :ensure t)
  (use-package gnuplot-mode
    :ensure t)
#+END_SRC

** Languages specific
*** python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python-mode
    :ensure t)
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-mode
    :ensure t)
#+END_SRC
*** scheme
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; turn on highlight matching brackets when cursor is on one
  (show-paren-mode 1)
  (setq show-paren-style 'expression)
  ;; setup paredit
  (use-package paredit
    :ensure t
    :init
    (dolist (hook '(emacs-lisp-mode-hook lisp-mode-hook geiser-mode-hook
                                         clojure-mode-hook))
      (add-hook hook 'paredit-mode))
    :diminish paredit-mode)
  (use-package geiser
    :ensure t
    :init
    (setq geiser-active-implementations '(mit))
    :config
    (add-hook 'scheme-mode-hook 'geiser-mode))

#+END_SRC

*** Latex (move this to org mode settings?)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex :ensure auctex)
#+END_SRC
**** header template for latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ryne-org-latex-header ()
    (interactive)
    (progn
      (insert "#+TITLE: \n"
              "#+AUTHOR: \n"
              "#+DATE: \\today \n"
              ;; avoid redbox around link
              "#+LATEX_HEADER: \\hypersetup{hidelinks=true}\n"
              ;; correct reference, just use \cite{key} for reference, see helm-bibtex for more info
              "#+LaTeX_HEADER: \\usepackage[backend=bibtex,sorting=none]{biblatex}\n"
              "#+LaTeX_HEADER: \\addbibresource{~/.emacs.d/references/main.bib}\n"
              "#+OPTIONS: H:2 num:t toc:nil ^:nil\n")))
#+END_SRC
