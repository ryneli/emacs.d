** Building Abstractions with Procedures
*** The elements of programming
- Ways provided by programming language to combine simple ideas into complex one
  - primitive expressions
  - means of combination
  - means of abstraction
- expressions
- Naming and the Environment
*** Exercise 1.6
Applicative-order evaluation vs. normal-order evaluation.
function *new-if* use applicative-order, so it will cause maximum recursion depth exceeded, like 1.5.

*** Exercise 1.7
#+BEGIN_SRC scheme :results both
  (define (sqrt-iter guess old-guess x)
    (if (good-enough? guess old-guess)
        guess
        (sqrt-iter (improve guess x)
                   guess
                   x)))

  (define (square x)
    (* x x))

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (average x y)
    (/ (+ x y) 2))

  (define (good-enough? guess old-guess)
    (< (abs (- guess old-guess)) 0.001))

  (define (sqrt x)
    (sqrt-iter 1.0 0.0 x))

  (sqrt 10000000000000)
#+END_SRC

#+RESULTS:
: 3162277.6601683795

*** Exercise 1.8
#+BEGIN_SRC scheme :results both
  (define (sqrt-iter guess old-guess x)
    (if (good-enough? guess old-guess)
        guess
        (sqrt-iter (improve guess x)
                   guess
                   x)))

  (define (square x)
    (* x x))

  (define (improve guess x)
    (/ (+ (/ x (square guess)) (+ guess guess)) 3))

  (define (average x y)
    (/ (+ x y) 2))

  (define (good-enough? guess old-guess)
    (< (abs (- guess old-guess)) 0.001))

  (define (sqrt x)
    (sqrt-iter 1.0 0.0 x))

  (sqrt 1000)
#+END_SRC

#+RESULTS:
: 10.000000000000002

*** Exercise 1.9
The first procedure is recursive; the second procedure is iterative.

*** Exercise 1.10 :HARD:
#+BEGIN_SRC scheme :results both
  (define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                   (A x (- y 1))))))
  ;;; (A 1 10) => 1024
  ;;; (A 2 4) => 65536
  ;;; (A 3 3) => 65536

  (define (f n) (A 0 n)) ;;; f(x) = 2*x
  (define (g n) (A 1 n)) ;;; g(x) = 2^{n}
  (define (h n) (A 2 n)) ;;; h(x) = 2^2^...(n-1 times)
  (define (k n) (* 5 n n))

  (h 4)
#+END_SRC

#+RESULTS:
: 65536

*** Exercise 1.11
#+BEGIN_SRC scheme :results both
  (define (recursive n)
    (if (< n 3)
        n
        (+ (recursive (- n 1))
           (* 2 (recursive (- n 2))) 
           (* 3 (recursive (- n 3))))))

  (define (iterative-inner a b c n)
    (if (< n 3)
        c
        (iterative-inner b c (+ (* 3 a) (* 2 b) c) (- n 1))))
  (define (iterative n)
    (if (< n 1)
        n
        (iterative-inner 0 1 2 n)))

  (recursive 30)
#+END_SRC

#+RESULTS:
: 61354575194

*** TODO Exercise 1.12

*** TODO Exercise 1.13

*** TODO 1.14

*** 1.15
#+BEGIN_SRC scheme :results both
  (define (cube x) (* x x x))
  (define (p x) (- (* 3 x) (* 4 (cube x))))
  (define (sine angle)
    (if (not (> (abs angle) 0.1))
        angle
        (p (sine (/ angle 3.0)))))
  (sine 12.15)

  (define (count x c)
    (if (not (> x 0.1))
        c
        (count (/ x 3.0) (+ c 1))))
  (count 12.15 0)
#+END_SRC

#+RESULTS:
: 5

- a: 5
- b: a^{1/3}

*** 1.16
#+BEGIN_SRC scheme :results both
  (define (even? a)
    (= (remainder a 2) 0))
  (define (fast-expt-iter b n a)
    (cond ((= n 0) a)
          ((even? n) (fast-expt-iter (* b b) (/ n 2) a))
          (else (fast-expt-iter (* b b) (/ (- n 1) 2) (* a b)))))
  (define (fast-expt b n)
    (fast-expt-iter b n 1))
  (fast-expt 2 25)
#+END_SRC

#+RESULTS:
: 33554432

*** TODO 1.17

*** TODO 1.18

*** 1.19
Never thought Fibonacci could be calculated in this way.
#+BEGIN_SRC scheme :results both
  (define (even? n) (= (remainder n 2) 0))
  (define (square a) (* a a))
  (define (fib-iter a b p q count)
    (cond ((= count 0) b)
          ((even? count)
           (fib-iter a
                     b
                     (+ (square p) (square q))
                     (+ (square q) (* 2 p q))
                     (/ count 2)))
          (else (fib-iter (+ (* b q) (* a q) (* a p))
                          (+ (* b p) (* a q))
                          p
                          q
                          (- count 1)))))
  (define (fib n)
    (fib-iter 1 0 0 1 n))
  (fib 50)
#+END_SRC

#+RESULTS:
: 12586269025

*** 1.20
- Applicative order :: 4
- Normal order :: 18
#+BEGIN_SRC scheme :results both
  (define (gcd a b cnt)
    (if (= b 0)
        cnt
        (gcd b (remainder a b) (+ cnt 1))))
  (gcd 206 40 0)
#+END_SRC

#+RESULTS:

*** 1.21
#+NAME: prime
#+BEGIN_SRC scheme
  (define (find-divisor n test-divisor)
    (if (= (remainder n test-divisor) 0)
        test-divisor
        (find-divisor n (+ test-divisor 1))))

  (define (smallest-divisor n)
    (find-divisor n 2))

  (define (prime? n)
    (= (smallest-divisor n) n))

  (list
   (smallest-divisor 199)
   (smallest-divisor 1999)
   (smallest-divisor 19999))
  ;; (prime? 199)
#+END_SRC

#+RESULTS: prime
: An error occurred.

*** 1.22
#+BEGIN_SRC scheme :noweb yes
  <<prime>>
  (define (start-prime-test n start-time)
    (if (prime? n)
        (report-prime (- (runtime) start-time))))

  (define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))

  (smallest-divisor 199)
#+END_SRC

#+RESULTS:
: 199

*** 1.25
(fast-expt base exp) is easy to overflow

*** 1.26
duplicated computation

*** TODO 1.27

*** TODO 1.28
#+BEGIN_SRC scheme
  (define (simpson f a b n)
    (define (fn x) (cond (((= x 0) 1)
                          ((= x n) 1)
                          ((= (remainder x 2) 0) 2)
                          ((= (remainder x 2) 1) 4))))
    (fn a))

  ;;; (simpson (lambda (x) (* x x x)) 0 1 4)
  (cond (else 1))
#+END_SRC

#+RESULTS:
: An error occurred.

